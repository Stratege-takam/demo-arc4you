// <auto-generated />
using System;
using EG.DemoPCBE99925.ManageCourseService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DemoPCBE99925.ManageCourseService.Database.MigrationTool.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20231003130420_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AuditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OwnerId");

                    b.ToTable("Courses", "app");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.CoursePerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AuditedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LeadId");

                    b.ToTable("CoursePeople", "app");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AuditedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CoursePersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CoursePersonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Participants", "app");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AuditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Peoples", "app");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Student", b =>
                {
                    b.HasBaseType("EG.DemoPCBE99925.ManageCourseService.Domain.Person");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Students", "app");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Teacher", b =>
                {
                    b.HasBaseType("EG.DemoPCBE99925.ManageCourseService.Domain.Person");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.ToTable("Teachers", "app");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Course", b =>
                {
                    b.HasOne("EG.DemoPCBE99925.ManageCourseService.Domain.Person", "Owner")
                        .WithMany("Courses")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.CoursePerson", b =>
                {
                    b.HasOne("EG.DemoPCBE99925.ManageCourseService.Domain.Teacher", "Lead")
                        .WithMany("LeadCourses")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Participant", b =>
                {
                    b.HasOne("EG.DemoPCBE99925.ManageCourseService.Domain.CoursePerson", "CoursePerson")
                        .WithMany("Participants")
                        .HasForeignKey("CoursePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EG.DemoPCBE99925.ManageCourseService.Domain.Student", "Student")
                        .WithMany("CourseParticipations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoursePerson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Student", b =>
                {
                    b.HasOne("EG.DemoPCBE99925.ManageCourseService.Domain.Person", null)
                        .WithOne()
                        .HasForeignKey("EG.DemoPCBE99925.ManageCourseService.Domain.Student", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Teacher", b =>
                {
                    b.HasOne("EG.DemoPCBE99925.ManageCourseService.Domain.Person", null)
                        .WithOne()
                        .HasForeignKey("EG.DemoPCBE99925.ManageCourseService.Domain.Teacher", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.CoursePerson", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Person", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Student", b =>
                {
                    b.Navigation("CourseParticipations");
                });

            modelBuilder.Entity("EG.DemoPCBE99925.ManageCourseService.Domain.Teacher", b =>
                {
                    b.Navigation("LeadCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
