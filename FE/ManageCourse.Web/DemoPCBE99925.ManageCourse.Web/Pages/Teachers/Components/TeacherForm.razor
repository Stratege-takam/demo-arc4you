@inherits NVOverlayable; 
@inject TeacherState state;
@implements IDisposable

<NVModal @attributes="@Props">
  <NVModalHeader>
    <h1 class="text-lg leading-6 font-medium">New Teacher</h1>
  </NVModalHeader>

  <NVModalBody>
        <EditForm OnValidSubmit="OnSubmit" Model="state.Model">
        <DataAnnotationsValidator />
        
        <NVContainer>
                @if (state.SuccessSave)
                {
                    <NVAlert MB="2" Close Permanent Color="success">
                        <NVText Size="sm" Medium MB="1">Information</NVText>
                        <NVText Size="sm" MB="2">
                            Save as successfull !
                        </NVText>
                    </NVAlert>
                }
                @if (state.ErrorServer != null)
                {
                    <NVAlert MB="2" Close Permanent Color="error-100">
                        <NVText Size="sm" Medium MB="1">Error</NVText>
                        <NVText Size="sm" MB="2">
                            @state.ErrorServer
                        </NVText>
                    </NVAlert>
                }
                <NVBlock MB="2">
                    <NVFieldText Name="Id"
                        @bind-Value="state.Model.Id"
                        Label="Teacher identifier" />

                </NVBlock>

                <NVBlock MB="2">
                    <NVFieldText Name="Firstname"
                        @bind-Value="state.Model.FirstName"
                        Label="Firstname" />
                </NVBlock>

                <NVBlock MB="2">
                    <NVFieldText Name="Lastname"
                        @bind-Value="state.Model.LastName"
                        Label="Lastname" />
                </NVBlock>

                 <NVBlock MB="2">
                    <NVFieldDate MinDate="@(DateTime.Now.AddYears(-80).ToShortDateString())" Name="Hire date"
                                      CalendarOutsideField
                        @bind-Value="state.Model.HireDate"
                        Label="Hire date" />
                </NVBlock>

                <NVBlock MB="2">
                    <NVFieldNumber Name="Salary"
                        Min="@(1)"
                        @bind-Value="state.Model.Salary"
                        Label="Slary">
                        <NVFieldBefore>
                            <NVIcon Name="currency-euro" />
                        </NVFieldBefore>
                    </NVFieldNumber>
                </NVBlock>
               
                <NVBlock Class="align-center-r-o">
                    <NVButton Type="submit" Size="sm" MR="2" Color="secondary">Submit </NVButton>
                    @if (state.Loading)
                    {
                        <NVLoader Color="secondary" Loading />
                    }
                </NVBlock>
        </NVContainer>

    </EditForm>
  </NVModalBody>


</NVModal>


@code {


    #region Listener state change


    protected override void OnInitialized()
    {
        base.OnInitialized();
        state.Mont(async () => await InvokeAsync(StateHasChanged));
    }

    public void Dispose()
    {
        state.UnMont(async () => await InvokeAsync(StateHasChanged));
    }

    #endregion

    #region Private methods
    private async Task OnSubmit()
    {
        await state.Submit();

        if(state.PersistChange == ManageCourseService.Facade.Sdk.PersistChange.Update
            && !state.Loading)
        {
            Actions["OnClose"]?.Invoke(state.Model);
        }
    }
    #endregion Private methods
}
